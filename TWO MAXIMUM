


class Solution {
    public static ArrayList<ArrayList<Integer>> twoMax(int n, int m, int rootServer,
                                                       int[][] edges, int[] requests) {
        ArrayList<ArrayList<Integer>> gr = new ArrayList<>(n+1);
        for(int i=0; i<n+1; i++){
            gr.add(new ArrayList<Integer>());
        }
        for(int i=0; i<edges.length; i++){
            gr.get(edges[i][0]).add(edges[i][1]);
            gr.get(edges[i][1]).add(edges[i][0]);
        }
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        for(int i=0; i<requests.length; i++){
            boolean vis[] = new boolean[n+1];
            ArrayList<Integer> max = new ArrayList<Integer>();
            max.add(-1);
            max.add(-1);
            searchDFS(gr, requests[i], vis, rootServer, max);
            res.add(max);
        }
        // code here
        return res;
    }
    static void searchDFS(ArrayList<ArrayList<Integer>> gr, int key, boolean vis[], int root, ArrayList<Integer>
    max){
        if(root == key){
            return;
        }
        vis[root] = true;
        if(root>max.get(0)){
            max.set(1,max.get(0));
            max.set(0, root);
        }
        else if(root>max.get(1)){
            max.set(1,root);
        }
        for (int i : gr.get(root)){
            if (!vis[i]) {
                searchDFS(gr, key, vis, i, max);
            }
        }
    }
}
